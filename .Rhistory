library(ISLR)
library(knitr)
include_graphics('./Kaggle screen shot STTT 481.png')
include_graphics('./swirl_hw_1_Ex1.PNG')
include_graphics('./swirl_hw_1_Ex2.PNG')
include_graphics('./swirl_hw_1_Ex3.PNG')
include_graphics('./swirl_hw_1_Ex4.PNG')
include_graphics('./swirl_hw_1_Ex5.PNG')
include_graphics('./swirl_hw_1_Ex6.PNG')
include_graphics('./swirl_hw_1_Ex7.PNG')
include_graphics('./swirl_hw_1_Ex8.PNG')
include_graphics('./swirl_hw_1_Ex9.PNG')
include_graphics('./swirl_hw_1_Ex10.PNG')
include_graphics('./swirl_hw_1_Ex11.PNG')
include_graphics('./swirl_hw_1_Ex12.PNG')
include_graphics('./swirl_hw_1_Ex13.PNG')
include_graphics('./swirl_hw_1_Ex14.PNG')
include_graphics('./swirl_hw_1_Ex15.PNG')
#Let's first replicate the df in question #7 from section 2.4
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c("Red","Red","Red","Green","Green","Red")
training_data <- data.frame(X1,X2,X3,Y)
training_data
#(a)
college <- read.csv("College.csv",header = TRUE)
college
#(b)
#Look at data using fix()
fix(college)
#Try the following commands
rownames(college)=college[,1]
fix(college)
college
college=college[,-1]
fix(college)
#Display college, see row.names is set and that extra (prior) column is removed
college
#(c) i.
#Use summary function on data set 'college'
summary(college)
#(c) ii.
#Use pairs function to create scatterplot matrix of first 10 columns of data set 'college'
pairs(college[1:10])
#(c) iii.
boxplot(college$Outstate, college$Private)
#(c) iv.
#Creates a vector of "No"'s dependant on the number of rows in the table
Elite=rep("No",nrow(college))
#Sets the values with a percent of over 50% to be a string "Yes"
Elite[college$Top10perc>50]="Yes"
#Coded "Elite" as a factory (aka category or enumerated type)
Elite=as.factor(Elite)
#Adds 'Elite' column to data set 'college'
college <- data.frame(college ,Elite)
college
#Run summary function on cllege and ensure Eliste is contained
summary(college)
#Get Count of Elite Colleges
number_of_elite <- sum(college$Elite=="Yes")
#Get Percent of Colleges Elite
percent_of_elite <- number_of_elite / (length(college$Elite))
#Boxplot of Out of State vs. Elise
boxplot(college$Outstate,college$Elite)
#(c) v.
#Histograms for College$P.Undergrad
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$P.Undergrad, breaks= 2 )
hist(College$P.Undergrad, breaks= 6 )
hist(College$P.Undergrad, breaks= 9 )
hist(College$P.Undergrad, breaks= 45 )
#(c) v.
#Histograms for College$Room.Board
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$Room.Board, breaks= 2 )
hist(College$Room.Board, breaks= 6 )
hist(College$Room.Board, breaks= 9 )
hist(College$Room.Board, breaks= 45 )
#(c) v.
#Histograms for College$Books
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$Books, breaks= 2 )
hist(College$Books, breaks= 6 )
hist(College$Books, breaks= 9 )
hist(College$Books, breaks= 45 )
#(c) vi.
#This did not end up being useful as there are too many variables
pairs(College)
College_Private = College[College$Private == 'Yes',]
College_Public = College[College$Private == 'No',]
#Create histograms to compare college cost
par(mfrow=c(2,2))
hist(College_Private$Books)
hist(College_Public$Books)
hist(College_Private$Room.Board)
hist(College_Public$Room.Board)
#(c) vi.
avg_g_rate_priv <- mean(College_Private$Grad.Rate)
avg_g_rate_pub <- mean(College_Public$Grad.Rate)
t.test(College_Private$Grad.Rate,College_Public$Grad.Rate)
#9
#View data and remove columns with missing data points
Auto
#Removes any rows with a missing data point
Auto_rm <- na.omit(Auto)
Auto_rm
#View all variables using summary function
summary(Auto_rm)
#Create a vector of all the quantitative variables
quant_vars <- c("mpg","cylinders","displacement","horsepower","weight","acceleration")
#Create a vector of all the qualitative variables
qual_vars <- c("name","year","origin",NA,NA,NA)
#Create and display columns containing quant_vars and qual_vars (quantitative variables and qualitative variables respectively)
Variable_Type <- data.frame(quant_vars,qual_vars)
Variable_Type
#Calculates range of all quantitative variables variables
range(Auto_rm$mpg)
range(Auto_rm$cylinders)
range(Auto_rm$displacement)
range(Auto_rm$horsepower)
range(Auto_rm$weight)
range(Auto_rm$acceleration)
#(c)
#Calc mean and sd of mpg
mean(Auto_rm$mpg)
sd(Auto_rm$mpg)
#Calc mean and sd of cylinders
mean(Auto_rm$cylinders)
sd(Auto_rm$cylinders)
#Calc mean and sd of displacement
mean(Auto_rm$displacement)
sd(Auto_rm$displacement)
#Calc mean and sd of horsepower
mean(Auto_rm$horsepower)
sd(Auto_rm$horsepower)
#Calc mean and sd of weight
mean(Auto_rm$weight)
sd(Auto_rm$weight)
#Calc mean and sd of acceleration
mean(Auto_rm$acceleration)
sd(Auto_rm$acceleration)
#(d)
#Create  data set of rows 10 - 85 of 'Auto_rm'
Auto_rm2 <- Auto_rm[c(-10:-85),]
#Display new data set 'Auto_rm2'
Auto_rm2
#Returns means of key quantitative columns
colMeans(Auto_rm2[1:6])
sapply(Auto_rm2[1:6], sd)
sapply(Auto_rm2[1:6], range)
pairs(Auto_rm[1:6])
plot(lm(mpg~ ., data = Auto_rm[1:6]))
plot(lm(cylinders~ ., data = Auto_rm[1:6]))
plot(lm(displacement~ ., data = Auto_rm[1:6]))
plot(lm(horsepower~ ., data = Auto_rm[1:6]))
plot(lm(weight~ ., data = Auto_rm[1:6]))
plot(lm(acceleration~ ., data = Auto_rm[1:6]))
cor(Auto_rm[1:6])
cor(Auto_rm[1:6])>.75
#I created a heat map but it did not end up being useful
#heatmap(as.matrix(Auto_rm[1:6]), scale="column", col = cm.colors(256))
lm(mpg~.,data=Auto_rm[1:6])
summary(lm(mpg~.,data=Auto_rm[1:6]))
plot(lm(mpg~.,data=Auto_rm[1:6]))
IQ=110
GPA=4
GENDER=1
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))+50
print(Yhat_salary)
resid_matrix = matrix(rep(0,5000), nrow=1000)
for(i in 1:1000){
n = 100
x = rnorm(n)
y = 5 + 2 * x + rnorm(n, 0.5)
for(j in 1:5){
resid_matrix[i,j] = sum(residuals(lm(y ~ poly(x,j,raw=T)))^2)
}
}
boxplot(resid_matrix)
#(a)
#Summarizes
summary(Auto_rm)
#Creates matrix of scatter plots containing all variables in data set
pairs(Auto_rm)
#(b)
#create matrix of correlations, excluding last name columns
pairs(cor(Auto_rm[1:8]))
model.lm1 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm1)
plot(model.lm1)
model.lm2 <- lm(mpg~cylinders*displacement*horsepower*weight*acceleration*year*origin, data = Auto_rm)
summary(model.lm2)
#Model taking into account my intuition and prior knowledge of the data set
model.lm2 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin+ year:mpg+year:horsepower, data = Auto_rm)
#Model taking into account my intuition and prior knowledge of the data set
model.lm3 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin+ year:mpg+year:horsepower, data = Auto_rm)
summary(model.lm3)
model.lm2 <- lm(mpg~cylinders*displacement*horsepower*weight*acceleration*year*origin, data = Auto_rm)
summary(model.lm2)
model.lm3 <- lm(log(mpg)~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm3)
model.lm4 <- lm(sqrt(mpg)~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm4)
model.lm5 <- lm(mpg~cylinders+displacement+horsepower+weight+(acceleration*year)^2+origin, data = Auto_rm)
summary(model.lm5)
Carseats
Carseats_Model1 <- lm(Sales~Price+Urban+US, data = Carseats)
summary(Carseats_Model1)
Carseats
summary(Carseats_Model1)
Carseats_Model2 <- lm(Sales~Price+US, data = Carseats)
summary(Carseats_Model2)
confint(Carseats_Model2)
plot(Carseats_Model2)
set.seed(1)
x=rnorm (100)
y=2*x+rnorm (100)
lm(y~x)
lm(y~x - 1)
lm(y~x +0)
summary(lm(y~x +0))
summary(lm(y~x +0))
summary(lm(y~x))
t_new <- sqrt(n - 1)*(x %*% y)/sqrt(sum(x^2) * sum(y^2) - (x %*% y)^2)
t_new
summary(lm(y~x))
print(summary(lm(y~x)))
print(summary(lm(y~x)))
print(summary(lm(x~y)))
setwd("C:Users/sam/Desktop/STT465Bayesian")
setwd("C:/Users/sam/Desktop/STT465Bayesian")
knitr::opts_chunk$set(echo = TRUE)
GOUT <- read.table("gout.txt",header=TRUE)
## Transform qualitative variables into factors in R, for example:
GOUT$sex <- factor(GOUT$sex,levels=c('M','F'))
rm(list=ls())
GOUT <- read.table("gout.txt",header=TRUE)
## Transform qualitative variables into factors in R, for example:
GOUT$sex <- factor(GOUT$sex,levels=c('M','F'))
Model1_Gout <- lm(su~sex+race+age, data=GOUT)
Model1_Gout
summary(Model1_Gout)
coefficients(Model1_Gout)
Model1_Gout
summary(Model1_Gout)
coefficients(Model1_Gout)
X1 <- model.matrix(~sex+race+age,data=GOUT)
X1 <- model.matrix(su~sex+race+age,data=GOUT)
head(X)
# Incidence matrix for intercept and effects of Sex, Race, Age,
## Hisp, Sex, Married, Exp
X=cbind(1,GOUT$sex,GOUT$race, GOUT$age)
head(X)
# Incidence matrix for intercept and effects of Sex, Race, Age,
## Hisp, Sex, Married, Exp
X=cbind(1,GOUT$sex,GOUT$race, GOUT$age)
X1 <- model.matrix(~sex+race+age,data=GOUT)
head(X)
y=GOUT$su
head(y)
dim (X)
y = as.matrix(y)
dim(y)
# OLS equations
Xy=t(X)%*%y
XtX=t(X)%*%X
# Estimates, compare with fm$coef
bHat2=solve(XtX,Xy)
bHat2
# To get SEs we need an estimate of the error variance
fitV = X%*%bHat2  ## Fitted values from ourmodel
eHat=y-fitV     ### Residual
plot(eHat)        ## Sequence plot of residual
plot(eHat ~ GOUT$su) ### ehat vs x
plot(eHat ~ fitV)   ### Residual vs fitted value plot
plot(eHat ~ GOUT$su) ### ehat vs x
plot(eHat ~ fitV)   ### Residual vs fitted value plot
vEHat=sum(eHat^2)/(nrow(GOUT)-ncol(X)) # Sum of squares of errors divide by n-rank(X)
SE=sqrt(diag(solve(XtX)*vEHat)) ## SE of bHat
t_stat=bHat2/SE
## P-values (under normality first, and under t then...)
pvaluesN=pnorm(abs(t_stat),lower.tail=F)*2
pvaluesT=pt(abs(t_stat),df=length(y)-ncol(X),lower.tail=F)*2
summary(fit2)
cbind(bHat2,SE,t_stat,pvaluesT)
summary(Model1_Gout)
cbind(bHat2,SE,t_stat,pvaluesT)
# Incidence matrix for intercept and effects of Sex, Race, Age,
## Hisp, Sex, Married, Exp
X=cbind(1,GOUT$sex,GOUT$race, GOUT$age)
X1 <- model.matrix(~sex+race+age,data=GOUT)
head(X)
y=GOUT$su
head(y)
dim (X)
y = as.matrix(y)
dim(y)
# OLS equations
Xy=t(X)%*%y
XtX=t(X)%*%X
# Estimates, compare with fm$coef
bHat2=solve(XtX,Xy)
bHat2
# To get SEs we need an estimate of the error variance
fitV = X%*%bHat2  ## Fitted values from ourmodel
eHat=y-fitV     ### Residual
plot(eHat)        ## Sequence plot of residual
plot(eHat ~ GOUT$su) ### ehat vs x
plot(eHat ~ fitV)   ### Residual vs fitted value plot
vEHat=sum(eHat^2)/(nrow(GOUT)-ncol(X)) # Sum of squares of errors divide by n-rank(X)
SE=sqrt(diag(solve(XtX)*vEHat)) ## SE of bHat
t_stat=bHat2/SE
## P-values (under normality first, and under t then...)
pvaluesN=pnorm(abs(t_stat),lower.tail=F)*2
pvaluesT=pt(abs(t_stat),df=length(y)-ncol(X),lower.tail=F)*2
summary(Model1_Gout)
cbind(bHat2,SE,t_stat,pvaluesT)
pair(GOUT)
pairs(GOUT)
Model1_Gout <- lm(su~sex+race+age, data=GOUT)
Model1_Gout
plot(x=age,y=su, data = GOUT)
plot(x=GOUT$age ,y=GOUT$su, data = GOUT)
plot(x=GOUT$age ,y=GOUT$su)
plot(x=GOUT$age ,y=GOUT$su,
xlab = "Age",
ylab = "Serum Urate")
plot(Model1_Gout)
## Prediction equations
bHat1=coef(Model1_Gout)
bHat1
plot(su~age,data =GOUT)
## Prediction equations
bHat1=coef(Model1_Gout)
bHat1
# Prediction Equation for:
Int= bHat1[1]+bHat1[4]
Slope=bHat1[4]
# Prediction Equation for Age:
Int= bHat1[1]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=4)
## Prediction equations
bHat1=coef(Model1_Gout)
bHat1
plot(su~age,data =GOUT,
xlab = "Age",
ylab = "Serum Urate")
# Prediction Equation for Age:
Int= bHat1[1]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=4)
bHat1
bHat1
# Prediction Equation for Age: Male, White
Int= bHat1[1]+bhat[3]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
bHat1
## Prediction equations
bHat1=coef(Model1_Gout)
bHat1
plot(su~age,data =GOUT,
xlab = "Age",
ylab = "Serum Urate")
# Prediction Equation for Age: Base, no variables added
#Int= bHat1[1]
#Slope=bHat1[4]
#Age=seq(from=30,to=70,by=1)
#lines(x=Age,y=Int+Age*Slope,col=4)
# Prediction Equation for Age: Male, White
Int= bHat1[1]+bhat[3]
## Prediction equations
bHat1=coef(Model1_Gout)
bHat1
plot(su~age,data =GOUT,
xlab = "Age",
ylab = "Serum Urate")
# Prediction Equation for Age: Base, no variables added
#Int= bHat1[1]
#Slope=bHat1[4]
#Age=seq(from=30,to=70,by=1)
#lines(x=Age,y=Int+Age*Slope,col=4)
# Prediction Equation for Age: Male, White
Int= bHat1[1]+bHat1[3]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=5)
# Prediction Equation for Age: Female, White
Int= bHat1[1]+bHat1[1]+bHat1[2]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=6)
# Prediction Equation for Age: Male, Black
Int= bHat1[1]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=7)
# Prediction Equation for Age: Female, Black
Int= bHat1[1]+bHat1[2]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=8)
summary(GOUT)
GOUT <- read.table("gout.txt",header=TRUE)
## Transform qualitative variables into factors in R, for example:
GOUT$sex <- factor(GOUT$sex,levels=c('M','F'))
pairs(GOUT)
summary(GOUT)
head(GOUT)
Model1_Gout <- lm(su~sex+race+age, data=GOUT)
Model1_Gout
Model1_Gout
summary(Model1_Gout)
coefficients(Model1_Gout)
Model1_Gout <- lm(su~sex+race+age, data=GOUT)
Model1_Gout
summary(Model1_Gout)
coefficients(Model1_Gout)
plot(x=GOUT$age ,y=GOUT$su,
xlab = "Age",
ylab = "Serum Urate")
plot(Model1_Gout)
#Base Plot
plot(x=GOUT$age ,y=GOUT$su,
xlab = "Age",
ylab = "Serum Urate")
## Prediction equations
bHat1=coef(Model1_Gout)
bHat1
plot(su~age,data =GOUT,
xlab = "Age",
ylab = "Serum Urate")
# Prediction Equation for Age: Base, no variables added
#Int= bHat1[1]
#Slope=bHat1[4]
#Age=seq(from=30,to=70,by=1)
#lines(x=Age,y=Int+Age*Slope,col=4)
# Prediction Equation for Age: Male, White
Int= bHat1[1]+bHat1[3]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=5)
# Prediction Equation for Age: Female, White
Int= bHat1[1]+bHat1[1]+bHat1[2]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=6)
# Prediction Equation for Age: Male, Black
Int= bHat1[1]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=7)
# Prediction Equation for Age: Female, Black
Int= bHat1[1]+bHat1[2]
Slope=bHat1[4]
Age=seq(from=30,to=70,by=1)
lines(x=Age,y=Int+Age*Slope,col=8)
Slope
swirl()
library(swirl)
swirl()
install_course("Exploratory_Data_Analysis")
swirl()
swirl()
head(mpg)
skip()
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(airquality$Month)
boxplot(Ozone~Month, airquality)
skip()
skip()
skip()\
skip()
skip()
skip()
names(par())
pair()$pin
par()$pin
par("fg")
?pch
par("pch")
par("lty")
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2,1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
