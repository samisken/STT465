y = 5 + 2 * x + rnorm(n, 0.5)
for(j in 1:5){
mat[i,j] = sum(residuals(lm(y ~ poly(x,j,raw=T)))^2)
}
}
for(i in 1:1000){
n = 100
x = rnorm(n)
y = 5 + 2 * x + rnorm(n, 0.5)
for(j in 1:5){
resid_matrix[i,j] = sum(residuals(lm(y ~ poly(x,j,raw=T)))^2)
}
}
resid_matrix
boxplot(resid_matrix)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(knitr)
include_graphics('./Kaggle screen shot STTT 481.png')
include_graphics('./swirl_hw_1_Ex1.PNG')
include_graphics('./swirl_hw_1_Ex2.PNG')
include_graphics('./swirl_hw_1_Ex3.PNG')
include_graphics('./swirl_hw_1_Ex4.PNG')
include_graphics('./swirl_hw_1_Ex5.PNG')
include_graphics('./swirl_hw_1_Ex6.PNG')
include_graphics('./swirl_hw_1_Ex7.PNG')
include_graphics('./swirl_hw_1_Ex8.PNG')
include_graphics('./swirl_hw_1_Ex9.PNG')
include_graphics('./swirl_hw_1_Ex10.PNG')
include_graphics('./swirl_hw_1_Ex11.PNG')
include_graphics('./swirl_hw_1_Ex12.PNG')
include_graphics('./swirl_hw_1_Ex13.PNG')
include_graphics('./swirl_hw_1_Ex14.PNG')
include_graphics('./swirl_hw_1_Ex15.PNG')
#Let's first replicate the df in question #7 from section 2.4
X1 <- c(0,2,0,0,-1,1)
X2 <- c(3,0,1,1,0,1)
X3 <- c(0,0,3,2,1,1)
Y <- c("Red","Red","Red","Green","Green","Red")
training_data <- data.frame(X1,X2,X3,Y)
training_data
#(a)
college <- read.csv("College.csv",header = TRUE)
college
#(b)
#Look at data using fix()
fix(college)
#Try the following commands
rownames(college)=college[,1]
fix(college)
college
college=college[,-1]
fix(college)
#Display college, see row.names is set and that extra (prior) column is removed
college
#(c) i.
#Use summary function on data set 'college'
summary(college)
#(c) ii.
#Use pairs function to create scatterplot matrix of first 10 columns of data set 'college'
pairs(college[1:10])
#(c) iii.
boxplot(college$Outstate, college$Private)
#(c) iv.
#Creates a vector of "No"'s dependant on the number of rows in the table
Elite=rep("No",nrow(college))
#Sets the values with a percent of over 50% to be a string "Yes"
Elite[college$Top10perc>50]="Yes"
#Coded "Elite" as a factory (aka category or enumerated type)
Elite=as.factor(Elite)
#Adds 'Elite' column to data set 'college'
college <- data.frame(college ,Elite)
college
#Run summary function on cllege and ensure Eliste is contained
summary(college)
#Get Count of Elite Colleges
number_of_elite <- sum(college$Elite=="Yes")
#Get Percent of Colleges Elite
percent_of_elite <- number_of_elite / (length(college$Elite))
#Boxplot of Out of State vs. Elise
boxplot(college$Outstate,college$Elite)
#(c) v.
#Histograms for College$P.Undergrad
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$P.Undergrad, breaks= 2 )
hist(College$P.Undergrad, breaks= 6 )
hist(College$P.Undergrad, breaks= 9 )
hist(College$P.Undergrad, breaks= 45 )
#(c) v.
#Histograms for College$Room.Board
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$Room.Board, breaks= 2 )
hist(College$Room.Board, breaks= 6 )
hist(College$Room.Board, breaks= 9 )
hist(College$Room.Board, breaks= 45 )
#(c) v.
#Histograms for College$Books
#Divide window into  2x2 matrix
par(mfrow=c(2,2))
#Produce 4 histograms with differing numbers of bins (designated by 'break' parameter)
hist(College$Books, breaks= 2 )
hist(College$Books, breaks= 6 )
hist(College$Books, breaks= 9 )
hist(College$Books, breaks= 45 )
#(c) vi.
#This did not end up being useful as there are too many variables
pairs(College)
College_Private = College[College$Private == 'Yes',]
College_Public = College[College$Private == 'No',]
#Create histograms to compare college cost
par(mfrow=c(2,2))
hist(College_Private$Books)
hist(College_Public$Books)
hist(College_Private$Room.Board)
hist(College_Public$Room.Board)
#(c) vi.
avg_g_rate_priv <- mean(College_Private$Grad.Rate)
avg_g_rate_pub <- mean(College_Public$Grad.Rate)
t.test(College_Private$Grad.Rate,College_Public$Grad.Rate)
#9
#View data and remove columns with missing data points
Auto
#Removes any rows with a missing data point
Auto_rm <- na.omit(Auto)
Auto_rm
#View all variables using summary function
summary(Auto_rm)
#Create a vector of all the quantitative variables
quant_vars <- c("mpg","cylinders","displacement","horsepower","weight","acceleration")
#Create a vector of all the qualitative variables
qual_vars <- c("name","year","origin",NA,NA,NA)
#Create and display columns containing quant_vars and qual_vars (quantitative variables and qualitative variables respectively)
Variable_Type <- data.frame(quant_vars,qual_vars)
Variable_Type
#Calculates range of all quantitative variables variables
range(Auto_rm$mpg)
range(Auto_rm$cylinders)
range(Auto_rm$displacement)
range(Auto_rm$horsepower)
range(Auto_rm$weight)
range(Auto_rm$acceleration)
#(c)
#Calc mean and sd of mpg
mean(Auto_rm$mpg)
sd(Auto_rm$mpg)
#Calc mean and sd of cylinders
mean(Auto_rm$cylinders)
sd(Auto_rm$cylinders)
#Calc mean and sd of displacement
mean(Auto_rm$displacement)
sd(Auto_rm$displacement)
#Calc mean and sd of horsepower
mean(Auto_rm$horsepower)
sd(Auto_rm$horsepower)
#Calc mean and sd of weight
mean(Auto_rm$weight)
sd(Auto_rm$weight)
#Calc mean and sd of acceleration
mean(Auto_rm$acceleration)
sd(Auto_rm$acceleration)
#(d)
#Create  data set of rows 10 - 85 of 'Auto_rm'
Auto_rm2 <- Auto_rm[c(-10:-85),]
#Display new data set 'Auto_rm2'
Auto_rm2
#Returns means of key quantitative columns
colMeans(Auto_rm2[1:6])
sapply(Auto_rm2[1:6], sd)
sapply(Auto_rm2[1:6], range)
pairs(Auto_rm[1:6])
plot(lm(mpg~ ., data = Auto_rm[1:6]))
plot(lm(cylinders~ ., data = Auto_rm[1:6]))
plot(lm(displacement~ ., data = Auto_rm[1:6]))
plot(lm(horsepower~ ., data = Auto_rm[1:6]))
plot(lm(weight~ ., data = Auto_rm[1:6]))
plot(lm(acceleration~ ., data = Auto_rm[1:6]))
cor(Auto_rm[1:6])
cor(Auto_rm[1:6])>.75
#I created a heat map but it did not end up being useful
#heatmap(as.matrix(Auto_rm[1:6]), scale="column", col = cm.colors(256))
lm(mpg~.,data=Auto_rm[1:6])
summary(lm(mpg~.,data=Auto_rm[1:6]))
plot(lm(mpg~.,data=Auto_rm[1:6]))
IQ=110
GPA=4
GENDER=1
Yhat_salary = (20*GPA) + (.07*IQ)+(35*GENDER)+(.01*GPA*IQ)+(-10*(GPA*GENDER))+50
print(Yhat_salary)
resid_matrix = matrix(rep(0,5000), nrow=1000)
for(i in 1:1000){
n = 100
x = rnorm(n)
y = 5 + 2 * x + rnorm(n, 0.5)
for(j in 1:5){
resid_matrix[i,j] = sum(residuals(lm(y ~ poly(x,j,raw=T)))^2)
}
}
boxplot(resid_matrix)
#(a)
#Summarizes
summary(Auto_rm)
#Creates matrix of scatter plots containing all variables in data set
pairs(Auto_rm)
#(b)
#create matrix of correlations, excluding last name columns
pairs(cor(Auto_rm[1:8]))
model.lm1 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm1)
plot(model.lm1)
model.lm2 <- lm(mpg~cylinders*displacement*horsepower*weight*acceleration*year*origin, data = Auto_rm)
summary(model.lm2)
#Model taking into account my intuition and prior knowledge of the data set
model.lm2 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin+ year:mpg+year:horsepower, data = Auto_rm)
#Model taking into account my intuition and prior knowledge of the data set
model.lm3 <- lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin+ year:mpg+year:horsepower, data = Auto_rm)
summary(model.lm3)
model.lm2 <- lm(mpg~cylinders*displacement*horsepower*weight*acceleration*year*origin, data = Auto_rm)
summary(model.lm2)
model.lm3 <- lm(log(mpg)~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm3)
model.lm4 <- lm(sqrt(mpg)~cylinders+displacement+horsepower+weight+acceleration+year+origin, data = Auto_rm)
summary(model.lm4)
model.lm5 <- lm(mpg~cylinders+displacement+horsepower+weight+(acceleration*year)^2+origin, data = Auto_rm)
summary(model.lm5)
Carseats
Carseats_Model1 <- lm(Sales~Price+Urban+US, data = Carseats)
summary(Carseats_Model1)
Carseats
summary(Carseats_Model1)
Carseats_Model2 <- lm(Sales~Price+US, data = Carseats)
summary(Carseats_Model2)
confint(Carseats_Model2)
plot(Carseats_Model2)
set.seed(1)
x=rnorm (100)
y=2*x+rnorm (100)
lm(y~x)
lm(y~x - 1)
lm(y~x +0)
summary(lm(y~x +0))
summary(lm(y~x +0))
summary(lm(y~x))
t_new <- sqrt(n - 1)*(x %*% y)/sqrt(sum(x^2) * sum(y^2) - (x %*% y)^2)
t_new
summary(lm(y~x))
print(summary(lm(y~x)))
print(summary(lm(y~x)))
print(summary(lm(x~y)))
getwd()
setwd("C:/Users/sam/Desktop/STT465Bayesian")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
theta_set =
joint_pmf = (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
theta_set = (0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1)
theta_set = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1)
joint_pmf <- function(set_of_theta){
value <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
return(value)
}
joint_pmf(theta_set)
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
value <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
list <- append(value)
}
return(list)
}
joint_pmf(theta_set)
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
list <- append(result)
}
return(list)
}
joint_pmf(theta_set)
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
print(result)
}
return("Done")
}
joint_pmf(theta_set)
fin_list <- c()
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
#print(result)
append(fin_list,result)
}
return(fin_list)
}
joint_pmf(theta_set)
#fin_list <- c()
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
#print(result)
append(fin_list,result)
}
return(fin_list)
}
print(result)
joint_pmf(theta_set)
#fin_list <- c()
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
print(result)
append(fin_list,result)
}
return(fin_list)
}
joint_pmf(theta_set)
fin_list <- c(0,4.107157e-31,3.738459e-16,1.306895e-08,0.0002285792,
0.03006864,0.06672895,0.001853172,1.003535e-07,9.395858e-18,0)
plot(fin_list)
barplot(fin_list)
barplot(fin_list)
posterior_dist_plot <- barplot(fin_list)
posterior_dist_plot
plot(posterior_dist_plot)
barplot(posterior_dist_plot)
posterior_dist_plot <- barplot(fin_list)
posterior_dist_plot
display(posterior_dist_plot)
print(posterior_dist_plot)
posterior_dist_plot <- barplot(fin_list)
posterior_dist_plot <- barplot(fin_list)
length(theta_set)
print(length(theta_set)_
print(length(theta_set))
library(knitr)
library("knitr")
knit2html("file")
knit2html("STT465ProblemSet#2.rmd")
render("STT465ProblemSet#2.rmd")
rmarkdown::render('file.rmd', output_format = 'html_document')
rmarkdown::render('STT465ProblemSet#2.rmd', output_format = 'html_document')
library(rmarkdown)
render("STT465ProblemSet#2.rmd")
#fin_list <- c()
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
print(result)
append(fin_list,result)
}
return(fin_list)
}
joint_pmf(theta_set)
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
print(result)
}
}
joint_pmf(theta_set)
knitr::opts_chunk$set(echo = TRUE)
theta_range <- seq(0,1,length=500)
theta_range <- seq(0,1,length=500)
prob_theta = 1
posterior_dist_func <- (choose(100,57))*(theta^57)*(1-theta)^43
plot(theta_range,posterior_dist_func,type="1")
posterior_dist_func <- (choose(100,57))*(theta^57)*(1-theta)^43
posterior_dist_func <- (choose(100,57))*(theta_range^57)*(1-theta_range)^43
plot(theta_range,posterior_dist_func,type="1")
plot(theta_range,posterior_dist_func)
posterior_dist_theta <- beta(1 + 57, 1 + 100 - 57)
?dbeta
posterior_dist_theta <- dbeta(1 + 57, 1 + 100 - 57)
posterior_dist_theta <- dbeta(theta_range,1 + 57, 1 + 100 - 57)
plot(theta_range,posterior_dist_theta)
#Use read csv function in order read in "fish.csv" data set
fish <- read.csv(file = "fish.csv", header = TRUE)
fish
table(fish$count)
table(fish$count)
View(fish)
mean(table(fish$count))
table(fish$count)
lambda_hat <- ean(table(fish$count))
lambda_hat <- mean(table(fish$count))
CI = c(lambda_hat-(1.96*sqrt(lambda_hat/n)),lambda_hat+(1.96*sqrt(lambda_hat/n)))
length(table(fish$count))
n <- length(table(fish$count))
CI = c(lambda_hat-(1.96*sqrt(lambda_hat/n)),lambda_hat+(1.96*sqrt(lambda_hat/n)))
table(fish$count)
lambda_hat <- mean(table(fish$count))
print(lambda_hat)
n <- length(table(fish$count))
CI = c(lambda_hat-(1.96*sqrt(lambda_hat/n)),lambda_hat+(1.96*sqrt(lambda_hat/n)))
print(CI)
barplot(table(fish$count))
Count_Categories <- c(0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,21,22,29,,30,31,32,38.65,149)
Count_Categories <- c(0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,21,22,29,,30,31,32,38,65,149)
Count_Categories <- c(0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,21,22,29,30,31,32,38,65,149)
lambda_hat
poisson_func <- function(Set_of_counts){
for (variable in Set_of_counts) {
x <- variable
result <- (e^(-10) * 10^x)/x!
result <- (e^(-10) * 10^x)/fact(x)
poisson_func <- function(Set_of_counts){
for (variable in Set_of_counts) {
x <- variable
result <- (e^(-10) * 10^x)/fact(x)
print(result)
}
}
poisson_func(Count_Categories)
e <- exp(1)
poisson_func <- function(Set_of_counts){
for (variable in Set_of_counts) {
x <- variable
result <- (e^(-10) * 10^x)/fact(x)
print(result)
}
}
poisson_func(Count_Categories)
poisson_func <- function(Set_of_counts){
for (variable in Set_of_counts) {
x <- variable
result <- (e^(-10) * 10^x)/factorial(x)
print(result)
}
}
poisson_func(Count_Categories)
Count_probs <- c(4.539993e-05,0.0004539993,0.002269996,0.007566655,0.01891664,0.03783327,0.06305546,0.09007923,0.112599,0.12511,0.12511,0.1137364,0.07290795,0.0520771,0.03471807,0.02169879,0.0008886101,0.0004039137,5.134715e-07,1.711572e-07,5.521199e-08,1.725375e-08,8.6803e-12,5.504589e-31,1.191936e-116)
plot(Count_Categories,Count_probs)
plot(Count_Categories,Count_probs,type = "s")
#Bar plot of the observed frequencies
barplot(table(fish$count))
Count_Categories <- c(0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,21,22,29,30,31,32,38,65,149)
lambda_hat
e <- exp(1)
poisson_func <- function(Set_of_counts){
for (variable in Set_of_counts) {
x <- variable
result <- (e^(-10) * 10^x)/factorial(x)
print(result)
}
}
poisson_func(Count_Categories)
Count_probs <- c(4.539993e-05,0.0004539993,0.002269996,0.007566655,0.01891664,0.03783327,0.06305546,0.09007923,0.112599,0.12511,0.12511,0.1137364,0.07290795,0.0520771,0.03471807,0.02169879,0.0008886101,0.0004039137,5.134715e-07,1.711572e-07,5.521199e-08,1.725375e-08,8.6803e-12,5.504589e-31,1.191936e-116)
plot(Count_Categories,Count_probs,type = "s")
#Create set of thetas
theta_set = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1)
#Function to get values of joint pmf given set of thetas
joint_pmf <- function(set_of_theta){
for (variable in set_of_theta) {
theta <- variable
result <- (choose(100,57)) * (theta^(57)) * (1-theta)^(43)
print(result)
}
}
joint_pmf(theta_set)
#List of values outputted from functino
fin_list <- c(0,4.107157e-31,3.738459e-16,1.306895e-08,0.0002285792,
0.03006864,0.06672895,0.001853172,1.003535e-07,9.395858e-18,0)
posterior_dist_plot <- barplot(fin_list)
#Set theta to be the range [0,1]
theta_range <- seq(0,1,length=500)
#Set theta probability
prob_theta = 1
posterior_dist_func <- (choose(100,57))*(theta_range^57)*(1-theta_range)^43
#Plot tjos posteriord distribution
plot(theta_range,posterior_dist_func)
posterior_dist_theta <- dbeta(theta_range,1 + 57, 1 + 100 - 57)
plot(theta_range,posterior_dist_theta)
#Use read csv function in order read in "fish.csv" data set
fish <- read.csv(file = "fish.csv", header = TRUE)
fish
table(fish$count)
table(fish$count)
lambda_hat <- mean(table(fish$count))
print(lambda_hat)
n <- length(table(fish$count))
CI = c(lambda_hat-(1.96*sqrt(lambda_hat/n)),lambda_hat+(1.96*sqrt(lambda_hat/n)))
print(CI)
#Bar plot of the observed frequencies
barplot(table(fish$count))
#Create vector of categories tp predict
Count_Categories <- c(0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,21,22,29,30,31,32,38,65,149)
lambda_hat
#Create e
e <- exp(1)
poisson_func <- function(Set_of_counts){
for (variable in Set_of_counts) {
x <- variable
result <- (e^(-10) * 10^x)/factorial(x)
print(result)
}
}
poisson_func(Count_Categories)
Count_probs <- c(4.539993e-05,0.0004539993,0.002269996,0.007566655,0.01891664,0.03783327,0.06305546,0.09007923,0.112599,0.12511,0.12511,0.1137364,0.07290795,0.0520771,0.03471807,0.02169879,0.0008886101,0.0004039137,5.134715e-07,1.711572e-07,5.521199e-08,1.725375e-08,8.6803e-12,5.504589e-31,1.191936e-116)
plot(Count_Categories,Count_probs,type = "s")
